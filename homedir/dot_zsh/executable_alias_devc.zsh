# ~/.zsh/alias_devc.zsh
unalias devc 2>/dev/null

# devc - Connect to a Docker container using an acronym or partial name
#
# Description:
#   Connects to a running Docker container by executing an interactive zsh session.
#   Matches containers by:
#   - Acronym: Generated by removing the last word and numeric suffix (e.g., 'www-generator-app-1' -> 'www-generator' -> 'wg').
#   - Partial name: Case-insensitive substring match (e.g., 'www' matches 'www-generator-app-1').
#   If no input is provided and exactly one container is running, connects to it.
#   Fails with an error if multiple containers match or no match is found.
#
# Usage:
#   devc              # Connect to the only running container
#   devc <acronym>    # Connect to a container by its acronym (e.g., 'devc wg' for 'www-generator-app-1')
#   devc <partial>    # Connect to a container by partial name (e.g., 'devc www' for 'www-generator-app-1')
#
# Examples:
#   devc              # Connects to the only container if exactly one is running
#   devc wg           # Connects to 'www-generator-app-1' (acronym: 'wg')
#   devc www          # Connects to 'www-generator-app-1' (partial match: 'www')
#   devc bsa          # Connects to 'bank-support-agent-app-1' (acronym: 'bsa')
#   devc bank         # Connects to 'bank-support-agent-app-1' (partial match: 'bank')
#
# Environment Variables:
#   DEBUG             # Set to any value (e.g., '1') to enable debug output showing container names and acronyms
#
# Requirements:
#   - Docker CLI must be installed.
#   - Docker socket (/var/run/docker.sock) must be mounted in the container (via devcontainer.json).
#
# Notes:
#   - Fails with a list of running containers if multiple containers are running and no input is provided.
#   - Fails with an error if the input matches multiple containers ambiguously.
#   - Acronyms are generated by taking the first letter of up to three words after removing the last word and numeric suffix.

devc() {
  local input="$1"
  local container_id
  local container_name
  local matches
  local acronym

  # Get all running container names and IDs
  local containers
  containers=$(docker ps --format "{{.ID}} {{.Names}}" 2>/dev/null)
  if [[ -z "$containers" ]]; then
    echo "Error: No running Docker containers found."
    return 1
  fi

  # If no input provided, check if exactly one container is running
  if [[ -z "$input" ]]; then
    local count=$(echo "$containers" | wc -l)
    if [[ $count -eq 1 ]]; then
      container_id=$(echo "$containers" | awk '{print $1}')
      container_name=$(echo "$containers" | awk '{print $2}')
      echo "Connecting to the only running container: $container_name"
      docker exec -it -e TERM -e COLORTERM -e LC_ALL=C.UTF-8 "$container_id" /usr/bin/zsh
      return $?
    else
      echo "Error: Multiple containers running. Specify an acronym or partial name."
      echo "Running containers:"
      echo "$containers" | awk '{print "  " $2}'
      return 1
    fi
  fi

  # Process input: match by acronym or partial name
  matches=()
  while read -r id name; do
    # Generate acronym: remove last word and numeric suffix, take first letters of up to 3 words, lowercase
    acronym=$(echo "$name" | sed -E 's/-[^-]+-[0-9]+$//' | awk -F'[-_]' '{for(i=1; i<=NF && i<=3; i++) if ($i != "") {printf "%s", substr($i,1,1)}}' | tr '[:upper:]' '[:lower:]')
    # Debug: print container name and its acronym if DEBUG is set
    [[ -n "$DEBUG" ]] && echo "Debug: Container '$name' -> Acronym '$acronym'" >&2
    # Check for exact acronym match or partial name match (case-insensitive)
    local name_lower=$(echo "$name" | tr '[:upper:]' '[:lower:]')
    local input_lower=$(echo "$input" | tr '[:upper:]' '[:lower:]')
    if [[ "$acronym" == "$input" || "$name_lower" == *"$input_lower"* ]]; then
      matches+=("$id $name")
    fi
  done <<< "$containers"

  # Handle matches
  local match_count=${#matches[@]}
  if [[ $match_count -eq 0 ]]; then
    echo "Error: No containers match '$input'."
    echo "Running containers:"
    echo "$containers" | awk '{print "  " $2}'
    return 1
  elif [[ $match_count -eq 1 ]]; then
    container_id=${matches[1]%% *}
    container_name=${matches[1]#* }
    echo "Connecting to container: $container_name"
    if [[ -z "$container_id" ]]; then
      echo "Error: Invalid container ID for '$container_name'."
      return 1
    fi
    docker exec -it -e TERM -e COLORTERM -e LC_ALL=C.UTF-8 "$container_id" /usr/bin/zsh
    return $?
  else
    echo "Error: Multiple containers match '$input':"
    for match in "${matches[@]}"; do
      echo "  $match"
    done
    echo "Please use a more specific acronym or partial name."
    return 1
  fi
}
